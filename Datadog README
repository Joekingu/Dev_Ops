Description :
DataDog est une plateforme complète de surveillance et d'analyse conçue pour suivre une large gamme de métriques à travers différents systèmes et applications. Elle offre une surveillance de l'infrastructure, des applications, des journaux, et bien plus encore, fournissant des insights sur les performances et la santé de l'ensemble de votre stack.

Pour plus d'informations, vous pouvez consulter la documentation officielle ici : Documentation officielle de DataDog.

Notre Implémentation :

Dans notre implémentation, nous avons opté pour une configuration simple afin de surveiller les métriques par défaut collectées par DataDog. Nous disposons d'une application Node.js de base, et nous avons suivi le guide de démarrage pour Docker.

La première étape a été d'intégrer l'agent DataDog dans notre conteneur Docker. Nous avons inclus l'installation de l'agent DataDog dans notre Dockerfile :

```Dockerfile
RUN DD_API_KEY=<VOTRE_CLE_API> bash -c "$(curl -L https://raw.githubusercontent.com/DataDog/datadog-agent/master/cmd/agent/install_script.sh)"
```

L'étape suivante a été d'exposer un point de terminaison dans notre application pour que DataDog puisse collecter des métriques. Comme nous utilisons Node.js, nous avons dû installer le module DataDog :

```bash
npm install datadog-metrics
```

Ensuite, dans notre fichier `index.js`, nous avons exposé notre point de terminaison pour les métriques :

```javascript
const express = require('express');
const app = express();
const dogstatsd = require('datadog-metrics');

const apiKey = process.env.DATADOG_API_KEY;
dogstatsd.init({ apiKey: apiKey });

// Exposer le point de terminaison des métriques pour DataDog
app.get('/metrics', (req, res) => {
  dogstatsd.gauge('nodejs.page.views', 1);
  res.send('Metrics endpoint');
});

const port = 3000;
app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
```

Enfin, nous avons configuré notre Docker Compose pour ajouter DataDog dans un conteneur Docker. Nous avons ajouté un fichier nommé `datadog.yaml` qui contenait la configuration pour DataDog. Dans la configuration suivante, DataDog collecte des données sur le port localhost 3000 au point de terminaison des métriques :

```yaml
api_key: "<VOTRE_CLE_API>"
```

Ensuite, nous avons ajouté le conteneur DataDog dans le fichier `docker-compose.yml`. Nous avons placé le tableau de bord DataDog sur le port 8125 du localhost. Après le lancement de DataDog, il récupère la configuration que nous avons définie précédemment.

```yaml
datadog:
    image: datadog/agent:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
    environment:
      - DD_API_KEY=<VOTRE_CLE_API>
      - DD_LOGS_ENABLED=true
      - DD_LOGS_CONFIG_SERVICE=<NOM_DE_VOTRE_SERVICE>
      - DD_LOGS_CONFIG_SOURCE=<NOM_DE_VOTRE_SOURCE>
    network_mode: host
```

Attention :

Pendant notre mise en œuvre, nous avons rencontré des difficultés liées à la configuration réseau. Il est important de s'assurer que DataDog et l'application sont sur le même réseau. De plus, il est essentiel d'utiliser la bonne adresse et non simplement 'localhost', sinon cela ne fonctionnera pas comme prévu.
